[
{
	"uri": "/00-course-intro-and-tools/",
	"title": "Course Introduction &amp; Tools",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Class Introduction \u0026amp; Tools "
},
{
	"uri": "/04-css-cascading-guidelines/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Learn how CSS decides which rule takes precedent when conflicting rules exist  "
},
{
	"uri": "/05-css-box-model/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Understand the difference between block and inline elements\n Discuss the CSS Box Model\n Code Along: Tags \u0026amp; Boxes\n Code Along: Notifications\n  "
},
{
	"uri": "/00-course-intro-and-tools/class-introductions/",
	"title": "Class Introductions",
	"tags": [],
	"description": "",
	"content": " QUESTIONS  Name\n What do you do?\n Why are you taking this class?\n Fun fact?\n  "
},
{
	"uri": "/05-css-box-model/box-model-overview/margin/",
	"title": "Margin",
	"tags": [],
	"description": "",
	"content": " Margin  Margin represents the space between boxes  .thing { /* margin can be applied to individual sides of a box using margin-top, margin-bottom, margin-left or margin-right */ /* style below applies 20px to left side of box */ margin-left: 20px; } .other-thing { /* style below applies 10px to all four sides of box */ margin: 10px; } .gizmo { /* when 4 values are provided, then values are applied in a clockwork manner: margin: [top] [right] [bottom] [left]; */ /* style below applies 4px to top, 10px to right, 6px to bottom \u0026amp; 10px to left */ margin: 4px 10px 6px 10px; } .other-gizmo { /* when 2 values are represented as follows margin: [top \u0026amp; bottom], [left, right]; */ /* style below applies 4px to top \u0026amp; bottom and 10px to right \u0026amp; left */ margin: 4px 10px; } JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/html-structure/",
	"title": "HTML Structure",
	"tags": [],
	"description": "",
	"content": " Front page of a newspaper\n Which elements stand out and why?\n What would happen if every word was the same size font?\n  Document in a word processor\nHTML document\nSummary  Structure helps readers better understand all forms of documents\n Documents leverage hierarchy, size and font weight to emphasize importance\n HTML pages are another type documents\n  "
},
{
	"uri": "/01-html-basics/",
	"title": "HTML Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 01 HTML Basics "
},
{
	"uri": "/00-course-intro-and-tools/course-objectives/",
	"title": "Course Objectives",
	"tags": [],
	"description": "",
	"content": " Gain an overview of how the internet works, the web development landscape, and the place of HTML and CSS in the web ecosystem\n Use HTML and CSS to mark up common types of web pages\n Build and deploy a basic website from scratch\n Describe the various opportunities to continue learning web development\n  "
},
{
	"uri": "/04-css-cascading-guidelines/last-rule/",
	"title": "Last Rule",
	"tags": [],
	"description": "",
	"content": " Last Rule  When two or more css rules have identical selectors, the latter of the two rules takes precedent  // in css p { color: red; } p { color: green; } \u0026lt;!-- in html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; Color will be green\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Here the \u0026lt;p\u0026gt; tag will be green because the last conflicting rule took precedent\nLive Example\nJS Bin on jsbin.com\nIn the example above, we have identical selectors .box where each has a different property for background-color. In this case, the last rule law will apply and the background-color of the element will be red since it is listed last (in the css file) among the conflicting selectors.\n"
},
{
	"uri": "/05-css-box-model/box-model-overview/padding/",
	"title": "Padding",
	"tags": [],
	"description": "",
	"content": " Padding  Padding is the space between the border of a box and any content contained within it\n Adding padding helps to increase readability of a box’s content\n  .thing { /* padding can be applied to individual sides of a box using padding-top, padding-bottom, padding-left or padding-right */ /* style below applies 20px to left side of box */ padding-left: 20px; } .other-thing { /* style below applies 10px to all four sides of box */ padding: 10px; } .gizmo { /* when 4 values are provided, then values are applied in a clockwork manner: padding: [top] [right] [bottom] [left]; */ /* style below applies 4px to top, 10px to right, 6px to bottom \u0026amp; 10px to left */ padding: 4px 10px 6px 10px; } .other-gizmo { /* when 2 values are represented as follows padding: [top \u0026amp; bottom], [left, right]; */ /* style below applies 4px to top \u0026amp; bottom and 10px to right \u0026amp; left */ padding: 4px 10px; } JS Bin on jsbin.com\n"
},
{
	"uri": "/05-css-box-model/thinking-in-boxes/",
	"title": "Thinking in Boxes",
	"tags": [],
	"description": "",
	"content": " Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n Let\u0026rsquo;s take a look at how a live site looks when we view it in terms of it\u0026rsquo;s boxes\n  "
},
{
	"uri": "/01-html-basics/html-tag-anatomy/",
	"title": "HTML Tag Anatomy",
	"tags": [],
	"description": "",
	"content": " What is a Tag?  Tags act like containers, they tell the browser what type of information lies between (aka the content) the opening and closing tag\n Opening Tag\n comprised of character(s) surrounded by less than and equal than signs (brackets) characters within the brackets indicates the tags purpose  Closing Tag\n Same as opening tag except closing tag contains a forward slash which informs browser that element has ended   Terms “tags” and “elements” are often used interchangeably\n Example  \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt;  "
},
{
	"uri": "/01-html-basics/html-attributes/",
	"title": "HTML Attributes",
	"tags": [],
	"description": "",
	"content": " What is an HTML Attribute?  Attributes provide additional information about the contents of the an element.\n They are placed in the opening tag\n They have two parts: name, value\n  Attribute Structure  Attribute Name\n Indicates what kind of extra information you are supplying to the browser about the content in the element characters within the brackets indicates the tags purpose  Attribute Value\n Information or setting for the attribute Is placed in double or single quotes   Example of a HTML Attribute  \u0026lt;img src=\u0026quot;mdn-logo-sm.png\u0026quot; alt=\u0026quot;MDN\u0026quot;\u0026gt;  A complete list of all the available HTML attributes can be found here\n "
},
{
	"uri": "/05-css-box-model/block-inline-elements/",
	"title": "Block and Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Level Elements  Always appear on a new line or row\n By default, block elements take up an entire row regardless of the width of their content\n Example block elements: \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;, \u0026lt;div\u0026gt;\n  JS Bin on jsbin.com\nFull list of block level elements can be found here\n Inline Elements  Sit within a block level element and do not start on a new line\n By default, inline elements only occupy the horizontal space needed to fit its content\n The height and width properties of an inline element will not be recognized\n Example inline elements: \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;span\u0026gt;\n  JS Bin on jsbin.com\nFull list of inline elements can be found here\n Inline-Block  Allows you make an element inline while also allowing the element to recognize height and width properties\n inline-block is set as a value of the display property in CSS\n  JS Bin on jsbin.com\nChanging Default Layout Behavior of Elements  The default layout behavior of elements can be overriden using the display property in CSS\n// in css p.customer-logos { display: inline; }   In the example above, we are using CSS to change the matching \u0026lt;p\u0026gt; elements (with a class of customer-logos) to display inline instead of its default display layout behavior of block\nFor more information about the display property click here\n "
},
{
	"uri": "/05-css-box-model/box-model-overview/border/",
	"title": "Border",
	"tags": [],
	"description": "",
	"content": " Border  Every box has a border, and by default it is invisible (0 pixels wide)\n Borders separates the edge of one box from another\n Border is expressed in three parts\n Border width: how thick the border will be\n Border style: solid, dashed, etc\n Border color: color of the border\n   /* border is most usually expressed using shorthand which allows you to specify a combination of the border 3 properties when using shorthand for border the order of the values does not matter */ /* style */ border: solid; /* width | style */ border: 2px dotted; /* style | color */ border: outset #f33; /* width | style | color */ border: medium dashed green; /* Border can be applied to individual sides of a box using border-top, border-bottom, border-left or border-right */ border-top: solid 1px blue; /* Also you can specify the border properties individually (this approach is not widely used) */ border-color: red; border-style: solid; border-width: 1px; border-top-color: blue; border-bottom-width: 3px; JS Bin on jsbin.com\n"
},
{
	"uri": "/06-css-colors/css-colors/color-names/",
	"title": "Color Names",
	"tags": [],
	"description": "",
	"content": " Color Names  colors represented by predefined names 147 color names this approach is limited\nh1 { color: green; }   "
},
{
	"uri": "/class-resources/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "  Referencing documentation is a core task for developers.\n Documentation communicates how something (in our case programming languages, software libraries) works.\n Good documentation reduces implementation time and increases predictability of our software programs.\n  We will be referring to the following list of the documentation resources frequently throughout the course:\nHTML MDN\u0026rsquo;s HTML Reference\nCSS MDN\u0026rsquo;s CSS Reference\nJavascript MDN\u0026rsquo;s Javascript Reference\njQuery jQuery Documentation\n"
},
{
	"uri": "/07-project/instructions/",
	"title": "Instructions",
	"tags": [],
	"description": "",
	"content": " Instructions  Build a Resume or About Me page\n Give your page a \u0026lt;title\u0026gt; tag inside of your Head element\n Use at least 10 elements in your Body\n Suggested Elements\n \u0026lt;h1\u0026gt; What is the biggest header on your page\n \u0026lt;h2\u0026gt; Subheadings\n \u0026lt;p\u0026gt; Tell us about yourself\n \u0026lt;ul\u0026gt; or  List your experiences\n \u0026lt;img\u0026gt; if you want!\n Style these elements using CSS classes and ID’s\n Add a unique layout using the box model\n  Inspiration Use the following website for inspiration: http://ga-wdi-exercises.github.io/belair_biography/\n This is just an example, your site does not need to look like this, add your own style!  "
},
{
	"uri": "/04-css-cascading-guidelines/specificity/",
	"title": "Specificity",
	"tags": [],
	"description": "",
	"content": " Specificity  If one selector is more specific than others, then the more specific rule takes precedent\n For example:\n h1 is more specific than * p.discount is more specific than p #city is more specific than img.town   Live Example\nJS Bin on jsbin.com\nIn the example above #featured is more specific than .box so the background-color of the element will be red even though .box is listed after #featured\n"
},
{
	"uri": "/03-css-selectors/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Classes and IDs\n CSS Selectors Overview \u0026amp; Examples\n Exercise: CSS Diner\n  "
},
{
	"uri": "/01-html-basics/tag-overview/",
	"title": "Tag Overview",
	"tags": [],
	"description": "",
	"content": "  Body, Head \u0026amp; Title   Text   Lists   Links   Images   Tables   Block \u0026amp; Inline Elements   Divs \u0026amp; Spans   Other Tags   "
},
{
	"uri": "/04-css-cascading-guidelines/important/",
	"title": "!important",
	"tags": [],
	"description": "",
	"content": " !important  You can override all the above rules by adding a “!important” after any property\n This should be used sparingly; excessive use of !important can cause confusion within your codebase\n  // in css #thing { color: green; } // add the !important option at the end of your declaration; p { color: red !important; } \u0026lt;!-- in html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;thing\u0026#34;\u0026gt;Will be RED and NOT Green\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Here we used the !important option in CSS to override the Specificity guideline that would have had the rule with the selector of #thing take precedence under normal circumstances\nLive Example\nJS Bin on jsbin.com\nIn the example above, the background-color of the element is blue despite that fact that of the conflicting styles #featured is more specific than .box. This is because we used the !important flag on the background-color property inside of the .box style which will override normal cascading rules.\n"
},
{
	"uri": "/02-css-basics/css-intro/",
	"title": "Intro to CSS",
	"tags": [],
	"description": "",
	"content": " What is CSS?  Stands for Cascading Style Sheet\n Allows you to control design of page\n With CSS allows you to create rules that specify how the content of an element should appear\n  p { color: gray; } Applying the CSS rule above will result in text color of all \u0026lt;p\u0026gt; tags being changed to gray.\nAnatomy of a CSS Rule  CSS works by associating rules with HTML elements.\n These rules govern how the content of specified elements should be displayed\n CSS Rules are made up of two parts: a selector and a declaration\n Selectors\n indicate which element the rule applies to  Declarations\n indicate how the elements referred to in the selector should be styled split into two parts (a property and a value), and are separated by a colon    p { color: black; } h1, h2, h3 { font-family: Gill Sans Extrabold, sans-serif; color: #191919; } "
},
{
	"uri": "/02-css-basics/adding-css/",
	"title": "Adding CSS to your website",
	"tags": [],
	"description": "",
	"content": " There are three ways to add css to your site  1) Inline (avoid!)\n 2) Internal css using \u0026lt;style\u0026gt; tag (avoid!)\n 3) External file (best practice)\n  Inline CSS (avoid!)  This method involves adding styles directly to html elements using a style attribute\n \u0026lt;body style=\u0026quot;background-color: orange;\u0026quot;\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt;   Internal CSS (avoid!)  This method involves adding styles directly to html elements using a \u0026lt;style\u0026gt; tag  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; body { font-family: Arial; background-color: rgb(185, 179, 175); } h1 { color: rgb(255, 255, 255); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Add CSS using an external stylesheet (Best Practice)  The use of external CSS stylesheets allows you to place all of your styles in a central location, any site-wide changes can be made in a single place\n A \u0026lt;link\u0026gt; tag must be used to connect a stylesheet to an html file\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;css/styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!-- in css/styles.css --\u0026gt; body { font-family: Arial, sans-serif, serif; padding: 10px; } p { font-size: 14px; color: #333333; } \u0026lt;link\u0026gt; Tag  Link tag is used to specify the relationship between an html file and an external file\n Here are some commonly used attributes for the \u0026lt;link\u0026gt; tag\n href: specifies the path to the external file\n rel: specifies the relationship between the HTML page and the file it is linked to. The value of this attribute should be stylesheet when linking to a CSS file\n type: specifies the type of document being linked to. This value should be \u0026ldquo;text/css\u0026rdquo;\n   The rel attribute is required when linking to css stylesheet\n"
},
{
	"uri": "/03-css-selectors/classes-and-ids/",
	"title": "Classes and Ids",
	"tags": [],
	"description": "",
	"content": " Classes and Ids  Both are just HTML attributes\n Should start with a letter or underscore\n Can be applied to any html element\n Important: Use of the class or id attribute by itself does not change the appearance of an element; CSS/Javascript must be involved\n  Class Attribute  Is used to group elements together, therefore establishing them as different from other elements on the page\n Element can share the same class attribute values (this could be applied to another type of element)\n  \u0026lt;!-- in html --\u0026gt; \u0026lt;p class=\u0026#39;important\u0026#39;\u0026gt; Awesome content \u0026lt;/p\u0026gt; // use a period to specify a class selector in css .important { font-weight: bold; } In css class selectors are specified using a . (period)\n Id Attribute  Used to uniquely identify elements on a page\n No two elements should have the same id value (otherwise it would not be unique)\n  \u0026lt;!-- in html --\u0026gt; \u0026lt;button id=\u0026#39;add-task\u0026#39;\u0026gt; Add Task \u0026lt;/button\u0026gt; // in css a \u0026#39;#\u0026#39; (hash) is used to specify an id selector #add-task { font-size: 12px; } In css id selectors are specified using a # (hash)\n Naming classes and ids  Developers can choose any name they want for classes and ids, however the names you choose should be descriptive  When should you use classes instead of ids (or vice versa)?  Use classes if applying a general style to more than one element on the same page\n Use ids when you style element differently from any other instance of the same element\n Use ids when using javascript to precisely target elements\n  "
},
{
	"uri": "/02-css-basics/",
	"title": "CSS Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 02 CSS Basics "
},
{
	"uri": "/04-css-cascading-guidelines/inheritance/",
	"title": "Inheritance",
	"tags": [],
	"description": "",
	"content": " Inheritance  Certain CSS properties such as font-family, font-size, color will be inherited by child properties\n However, properties such as background color or border properties are not inherited\n Click here to see a full list inherited and non-inherited CSS properties\n  Live Example\nJS Bin on jsbin.com\nIn the example, the p element will automatically inherit the font color property from its ancestor (body) since color is a css property that can be inherited. These inherited styles can easily be overridden if you create css rules that are more specific that change the same property. This was done in the style for p.main where we specified a color property instead of inheriting it from the body element.\n"
},
{
	"uri": "/01-html-basics/tag-overview/body-head-title/",
	"title": "Body, Head &amp; Title",
	"tags": [],
	"description": "",
	"content": " \u0026lt;html\u0026gt;, \u0026lt;body\u0026gt;, \u0026lt;head\u0026gt;, \u0026lt;title\u0026gt; The following tags make up the structure of all web pages\n \u0026lt;html\u0026gt;\n Represents the root (top-level element) of an HTML document, so it is also referred to as the root element\n All other elements must be descendants of this element.\n  \u0026lt;body\u0026gt;\n Everything inside the body tag is shown inside the browser window  \u0026lt;head\u0026gt;\n Contains information about the page (vs shown on the pages\n Title and Links to other files are usually specified in the head element\n  \u0026lt;title\u0026gt;\n Text here is displayed in the top of the browser (or on the tab in Chrome or other browsers that use tabs)   \u0026lt;title\u0026gt; is just one of many tags that can be placed inside of \u0026lt;head\u0026gt;, we\u0026rsquo;ll see more of them as we go through the class, for more information click here\n Example\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt; Title of the page \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Main Heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Some cool content\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  what is the DOCTYPE? There have been several versions of HTML and because of this each web page should begin with a DOCTYPE declaration to tell a browser which version of HTML the page is using (browsers will still usually display the page even if it is not included).\n "
},
{
	"uri": "/class-resources/keyboard-shortcuts/",
	"title": "Keyboard Shortcuts",
	"tags": [],
	"description": "",
	"content": " General Window Management \u0026amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools cmd+option + i F2 or ctrl + shift + i   Refresh page cmd + R ctrl + R   Switch between applications cmd + tab alt + tab   Switch between windows in the same application cmd + ~     Atom Shortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open Settings Menu cmd+, ctrl+, ctrl+, Opens the Atom\u0026rsquo;s settings menu   Open File (Fuzzy) cmd+p or cmd+t ctrl+p or ctrl+t ctrl+p or ctrl+t Opens the Fuzzy Finder   Browse Open Files cmd+b ctrl+b ctrl+b Browse tabs within the window   Previous Tab alt+cmd+left ctrl+pageup ctrl+pageup Cycles left through open tabs (in the active pane)   Next Tab alt+cmd+right ctrl+pagedown ctrl+pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd+\\ ctrl+\\ ctrl+\\ Toggles Atom\u0026rsquo;s file Tree View   Show Available Snippets alt+shift+s alt+shift+s alt+shift+s Shows the snippets available to Atom   Save cmd+s ctrl+s ctrl+s Saves the currently active file   Save As shift+cmd+s ctrl+shift+s ctrl+shift+s Saves the currently active file under a different name   Save All alt+cmd+s   Saves all changed files   Close Tab cmd+w ctrl+w ctrl+w Closes the currently active tab   Close Window shift+cmd+w ctrl+shift+w ctrl+shift+w Closes the currently active editor window   Split Window cmd+k up/down/left/right ctrl+k up/down/left/right ctrl+k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd+k cmd+up/down/left/right ctrl+k ctrl+up/down/left/right ctrl+k ctrl+up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl+cmd+f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift+cmd+d ctrl+shift+d ctrl+shift+d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl+shift+k ctrl+shift+k ctrl+shift+k Deletes the current line   Move Line Up ctrl+cmd+up ctrl+up ctrl+up Moves the contents of the current cursor position up one line. If there is a line above with content, the current lines content will swap with the one above it.   Move Line Down ctrl+cmd+down ctrl+down ctrl+down Moves the contents of the current cursor position down one line. If there is a line below with content, the line\u0026rsquo;s content will swap with the one below it.   Find/Replace cmd+f ctrl+f ctrl+f Opens up the Find/Replace panel   Find Next cmd+g F3 F3 Toggles forward through the results of the current buffer in the file while the Find/Replace panel is active   Find Previous shift+cmd+g shift+F3 shift+F3 Toggles backward through the results of the current buffer in the file while the Find/Replace panel is active   Find in Project shift+cmd+f ctrl+shift+f ctrl+shift+f Opens the Find in Project Panel   Go To Line ctrl+g ctrl+g ctrl+g Opens the Go To Line panel   Go To Matching Bracket ctrl+m ctrl+m ctrl+m The cursor goes to the matching top bracket that the cursor is ecapsulated in   Select Line cmd+l ctrl+l ctrl+l Selects the entire line the cursor\u0026rsquo;s current position is in   Toggle Comment cmd+/ ctrl+/ ctrl+/ Toggles the selected text into a comment of the current grammar   Column Selection ctrl+shift+up/down ctrl+alt+up/down shift+alt+up/down Allows to select multiple rows, where the same edit will be applied   Select Same Words cmd+d ctrl+d ctrl+d If you select a word, and then hit the key combo for this command, Atom will select the next same word for you. Then you can either type directly (which will replace the old words) or use left or right arrow to append things.   Undo Selection cmd+u ctrl+u ctrl+u This undoes the previous selection, like from Select Same Words.   Select All The Same Words At Once cmd+ctrl+g alt+f3 alt+f3 This shortcut is similar to cmd+d/ctrl+d but it selects all the matching words at once.    "
},
{
	"uri": "/06-css-colors/css-colors/hex-codes/",
	"title": "Hex codes",
	"tags": [],
	"description": "",
	"content": " Hex Codes  colors represented by values for red, green and blue in hexadecimal code\nh1 { color: #66cdaa; }   "
},
{
	"uri": "/03-css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " Lesson 03 CSS Selectors "
},
{
	"uri": "/06-css-colors/css-colors/",
	"title": "CSS Colors",
	"tags": [],
	"description": "",
	"content": " Specifying Colors in CSS Several ways to express colors in CSS\n Color Names Hex Codes RGB RGBa HSL HSLa  "
},
{
	"uri": "/03-css-selectors/css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Overview  Many different types of selectors that allow you to target rules to specific elements in an HTML document\n Selectors are case sensitive, must match element names and attributes exactly\n     Selector Meaning Example     Universal Selector Applies to all elements *{}   Type Selector Match elements names h1, h2, h3 {}   Class Selector Matches all elements with a class attribute value matching on specified after a period (.) .hint {}, p.hint {}   ID Selector Matches all elements with a id attribute value matching on specified after a hash (#) #offer {}   Child Selector Matches elements that are a direct child of another li \u0026gt; a {}   Descendant Selector Matches element that is a direct descendant of another (not just the child) p a {}   Adjacent Sibling Selector Matches first element that is a sibling of another h1+p {}   General Sibling Selector Matches all elements that is a sibling of another h1~p {}   Attribute Selector Attribute selectors select an element using the presence of a given attribute or attribute value input[type=\u0026quot;email\u0026quot;] {}   Pseudo Class Selector Selector that specifies a special state of the selected element(s) a:visited   Pseudo Element Selector Selector that lets you style a specific part of the selected element(s) p::first-line    A complete list of all CSS Selectors can be found here\n "
},
{
	"uri": "/04-css-cascading-guidelines/",
	"title": "CSS Cascading Guidelines",
	"tags": [],
	"description": "",
	"content": " Lesson 04 CSS Cascading Guidelines "
},
{
	"uri": "/03-css-selectors/css-selectors-examples/",
	"title": "CSS Selectors Examples",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Examples Class Selector JS Bin on jsbin.com\nID Selector JS Bin on jsbin.com\nChild Selector JS Bin on jsbin.com\nDescendent Selector Descendant Selector Example on jsbin.com\nAdjacent Sibling Selector Adjacent Sibling Selector example on jsbin.com\nGeneral Sibling Selector General Sibling Selector Example on jsbin.com\nPseudo Class Selector JS Bin on jsbin.com\nPseudo Element Selector JS Bin on jsbin.com\n"
},
{
	"uri": "/02-css-basics/code-along-about-me/",
	"title": "Code Along - About Me",
	"tags": [],
	"description": "",
	"content": " Code Along: Building an \u0026ldquo;About Me\u0026rdquo; page  As a class, we\u0026rsquo;ll walk through using html and css to build the \u0026ldquo;About Me\u0026rdquo; page depicted in the image below   Using Atom, open the folder called rocket_raccoon_about_me in your html_css_bootcamp folder. You will be using these files as starting off point.\n When building websites it is a best practice to have a plan in place before starting out. One popular planning tool is called a wireframe.\n Wireframes are low fidelity drawings that help you visualize the layout of your pages. We\u0026rsquo;ll talk about wireframes more in depth throughout the course.\n For this exercise we\u0026rsquo;ll be using the wireframe below to help guide is build out the About Me page:\n  "
},
{
	"uri": "/01-html-basics/code-along-ga-press-release/",
	"title": "Code Along - GA Press Release",
	"tags": [],
	"description": "",
	"content": " Code Along: GA Press Release  As a class, we\u0026rsquo;ll walk through using html to build out an html version of a press release\n Using your text editor, open the folder called ga_press_release (found within the html_css_bootcamp) folder\n  "
},
{
	"uri": "/05-css-box-model/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " Lesson 05 CSS Box Model "
},
{
	"uri": "/01-html-basics/code-along-cookie-recipe/",
	"title": "Code Along: Cookie Recipe",
	"tags": [],
	"description": "",
	"content": " Code Along: Cookie Recipe  Using Atom, open the folder called cookie_recipe in your html_css_bootcamp folder. You will be using these files as starting off point.\n Tips\n Focus on the content first, then the image then the CSS There will be some items that you will need to look up, CSS is one of them (don\u0026rsquo;t worry we will be going over this in the next class, but part of being a developer is being able to google your way to solutions)   "
},
{
	"uri": "/05-css-box-model/box-model-overview/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " CSS Box Model  Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n   tags are examples of block elements-- , , , -- Box Model consists of:  Margin\n Padding\n Border\n  "
},
{
	"uri": "/05-css-box-model/code-along-tags-and-boxes/",
	"title": "Code Along - Tags and Boxes",
	"tags": [],
	"description": "",
	"content": " Code Along: Tags \u0026amp; Boxes  Using Atom, open the folder called tags_boxes in your html_css_bootcamp folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll walk through seeing examples of the box model in action\n  "
},
{
	"uri": "/class-resources/atom-editor-settings/",
	"title": "Recommended Atom Editor Settings",
	"tags": [],
	"description": "",
	"content": " All of the settings below can be accessed using the following steps:\n Mac: cmd + , -\u0026gt; Editor PC: ctrl + , -\u0026gt; Editor  Setting indentation levels / default tab-size During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Atom makes it easy conform to this approach by setting our tab to a set level of indentation.\nAfter updating this setting, pressing the tab key will represent one level of indentation which will translate to 2 spaces.\nDisplaying indentation guides Displaying the indentation guide provides a visual way of helping you ensure your indentation levels are correct\nSetting wordwrap Wordwrap ensures that long lines in your code are automatically wrapped to the next line. This improves readability of your code.\n"
},
{
	"uri": "/06-css-colors/css-colors/rgb/",
	"title": "RGB",
	"tags": [],
	"description": "",
	"content": " RGB  colors represented by values for red, green and blue expressed as numbers between 0 and 255\nh1 { color: rgb(102, 205, 170); }   "
},
{
	"uri": "/05-css-box-model/code-along-notifications/",
	"title": "Code Along - Notifications",
	"tags": [],
	"description": "",
	"content": " Code Along: Notifications  Using Atom, open the folder called notifications in your html_css_bootcamp folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll see examples of using classes and ids to style notifications that are often used to provide contextual information to users within an application\n  "
},
{
	"uri": "/06-css-colors/",
	"title": "CSS Colors",
	"tags": [],
	"description": "",
	"content": " Lesson 06 CSS Colors "
},
{
	"uri": "/01-html-basics/tag-overview/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " HTML Headings  Six (6) levels of headings h1 tags is used for main headings h2 tags are used for subheadings Remaining level headings used as needed based on your content hierarchy  Browsers display headings differently, but relative sizes will always be consistent (by default) - i.e. h1 will always be bigger than h2\n JS Bin on jsbin.com\nParagraphs  Use \u0026lt;p\u0026gt; element to display paragraphs\n By default, browser displays each paragraph on a new line\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/07-project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": " Lesson 07 Project "
},
{
	"uri": "/06-css-colors/css-colors/rgba/",
	"title": "RGBa",
	"tags": [],
	"description": "",
	"content": " RGBa  Leverages CSS3 inclusion of the opacity property Just like RGB but allows you to specify the opacity as the fourth value (alpha value) alpha must be a number between 0.0 and 1.0 (0.5 means 50% opacity)\nh1 { color: rgba(102, 205, 170, 0.25); }   "
},
{
	"uri": "/class-resources/atom-themes/",
	"title": "Working with Atom Themes",
	"tags": [],
	"description": "",
	"content": " Changing Themes Atom allows you to easily switch between your installed themes by doing the following:\n Opening Atom Settings (mac: cmd + , | pc: ctrl + ,) Select Themes in the left-hand menu Select the dropdown menu labeled Syntax Themes Choose one of the installed themes listed in the dropdown menu  Atom comes pre-installed with a set of themes. See that section below to add new themes to Atom\n Installing New Themes Atom allows you to install themes created by developers who participate in Atom\u0026rsquo;s vibrant community. Atom has a dedication section on their official site for the discovery of these themes (Atom Themes)\nHere are steps involved in adding a new Atom theme:\n Visit https://atom.io/themes Find a theme that you\u0026rsquo;d like to install Press the install button on the theme\u0026rsquo;s page An alert will be displayed asking you if you would like to open Atom - select the option labeled Open Atom While in Atom Settings, press the button labeled Install to install the new theme Select Themes in the left-hand menu of Atom Settings Select the dropdown menu labeled Syntax Themes Select the newly installed theme from the dropdown menu to apply the new theme to Atom  Here\u0026rsquo;s an example of the installation of an Atom theme named Atom Material\n"
},
{
	"uri": "/00-course-intro-and-tools/what-is-frontend-development/",
	"title": "What Is front-end Development?",
	"tags": [],
	"description": "",
	"content": " Overview  Front-end web development, also known as client-side development is the practice of producing HTML, CSS and JavaScript for a website or Web Application so that a user can see and interact with them directly.  What are the primary technologies associated with front-end development?  HTML\n CSS\n Javascript\n  How is front-end development differ from back-end development?  Backend development, is also known as server-side development and involves storing data on behalf of users or customers\n Example: Amazon, stores information about all it\u0026rsquo;s customers\u0026rsquo; order history in a database  Also where a company\u0026rsquo;s business logic lives\n Example: Amazon will only qualify non-prime customers for free shipping if they spend over $50  The programming languages used for back-end development includes (but is not limited to) Ruby, Python, Java, Go and Javascript (using a technology called NodeJS)\n  "
},
{
	"uri": "/01-html-basics/tag-overview/lists/",
	"title": "Lists",
	"tags": [],
	"description": "",
	"content": " Lists  3 different types of lists:\n Unordered - lists start with a bullet point by default Ordered - numbered lists Definition - set of terms along with definition of those terms (not used often)  Both unordered and ordered lists contain list items\n list items elements are the items within list, they use opening and closing tag\n list item elements are indented by default\n list items elements are always a child a list element (in this case the “unordered list” or ul element.\n   Unordered List Example of an unordered list\nJS Bin on jsbin.com\nOrdered List Example of an ordered list\nJS Bin on jsbin.com\nDefinition List Example of a definition list\nJS Bin on jsbin.com\n"
},
{
	"uri": "/06-css-colors/css-colors/hsl/",
	"title": "HSL",
	"tags": [],
	"description": "",
	"content": " HSL  Introduced with CSS3\n Provides an alternative way to express colors based on:\n Hue (expressed as an angle between 0 and 360 degrees)\n Saturation (expressed as a percentage)\n Lightness (expressed as a percentage 0% =\u0026gt; white, 50% =\u0026gt; normal \u0026amp; 100% =\u0026gt; black)\nbody { background-color: hsl(0, 0%, 78%); }    "
},
{
	"uri": "/00-course-intro-and-tools/tools/",
	"title": "Course Tools",
	"tags": [],
	"description": "",
	"content": " Text Editor:\n Why?: Text editor is a program that developers use to create and edit a range of programming language files. We\u0026rsquo;ll be using Atom, because it\u0026rsquo;s open source (free) and really good.\n Download Atom\n    Browser:\n Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.\n Install Google Chrome\n    Github:\n Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other. You\u0026rsquo;ll be using Github/Git to submit our homework assignments. kj\n Create a Github Account\n Download the Github Desktop App\n    Slack:\n Why?: Is a popular chat application that we\u0026rsquo;ll be using as our primary method of communication both during and outside of class\n Join the Coding Bootcamps GA slack workspace\n You should have received an emailed invitation to join GA’s slack team\n Don’t see an invitation in your inbox? Check your spam folder - many of Slack’s invitation emails tend to end up there. Let me know if you weren’t sent an invite and we’ll get you sorted out.\n  Add yourself to the dedicated Slack Channel for our class named #code-101 (see instructions on how to join a Slack Channel here)\n   "
},
{
	"uri": "/06-css-colors/css-colors/hsla/",
	"title": "HSLa",
	"tags": [],
	"description": "",
	"content": " HSLa  Just like HSL but adds the ability to specify opacity using an alpha value\n alpha must be a number between 0.0 and 1.0 (0.5 means 50% opacity)\nbody { background-color: hsla(0, 100%, 75%, 0.5); }   "
},
{
	"uri": "/01-html-basics/tag-overview/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " Links  Links created using the \u0026lt;a\u0026gt; tag\n link tags use the href attribute (remember attributes come with a name and a value)\n The value of the href attribute is the location where the link will direct you after it has been clicked\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt;My page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;https://www.cnn.com\u0026#34;\u0026gt; CNN \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/about_us.html\u0026#34;\u0026gt;About Us\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "
},
{
	"uri": "/01-html-basics/tag-overview/images/",
	"title": "Images",
	"tags": [],
	"description": "",
	"content": " Images  Images are placed in a \u0026lt;img\u0026gt;\n Empty element meaning there is no closing tag\n \u0026lt;img src=\u0026quot;images/team_hands\u0026quot; alt=\u0026quot;a group of people touching hands in a star formation\u0026quot; title=\u0026quot;teamwork is awesome\u0026quot;\u0026gt;   Image Attributes  src - Tells browser where to find the image (may relative or absolute path)\n alt - Provides description of image for people who cannot see the image (accessibility)\n title - Used to provide additional information about the image. Most browsers will display this information in a tooltip.\n  Image File Formats  .png - Supports transparency and semi-transparency, great for logos, icons, and repeating background tiles. Almost always preferable to a gif.\n .gif - Can have basic transparency, typically a png is used instead\n .jpeg - No transparency, can be stored at different compression levels with varying amounts of \u0026ldquo;lossy-ness\u0026rdquo;, typically the best format for photos\n  Image example JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/keys-to-success/",
	"title": "Keys to Success",
	"tags": [],
	"description": "",
	"content": " Practice, Practice, Practice: More you practice the concepts learned in class, the faster you\u0026rsquo;ll pick them up\n Don\u0026rsquo;t try to memorize anything: You\u0026rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don\u0026rsquo;t remember something just look it up (i.e. google).\n Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they\u0026rsquo;ve used in the past to solve problems they encounter in the present. So keep your past code organized so you easily reference it later. You don\u0026rsquo;t get points for memorizing anything, but you do get points for being resourceful and using past work to help you move a litter faster today.\n Ask Questions: Don\u0026rsquo;t be afraid to ask questions, everyone learns differently, it\u0026rsquo;s the instructor\u0026rsquo;s responsibility to ensure you grasp the concepts. Your questions helps me (your instructor) understand what\u0026rsquo;s working and what\u0026rsquo;s not.\n Change your perspective of failure: Expects things to not work. That\u0026rsquo;s where the fun part and truly where the learning begins. It\u0026rsquo;s during the troubleshooting phase where\u0026rsquo;s you\u0026rsquo;ll gained a deep understanding of concepts taught in class. If everything worked the first time, you\u0026rsquo;d never learn anything :)\n Get comfortable with the fact that there are multiple ways to do things: If I gave a 10 experienced developers a coding homework assignment chances are that I will receive 10 different approaches and they\u0026rsquo;ll all be \u0026ldquo;correct\u0026rdquo; (meaning each approach will accomplish the stated goals of the assignment). There is no 1 right answers when it comes to coding. There are \u0026ldquo;best practices\u0026rdquo; some of which we will push in this course, others best practices will be learned through continued practice. Instead of focusing on what you think may be the \u0026ldquo;best\u0026rdquo; approach, just focus on ensuring that your program / assignments is the goals or requirements (\u0026ldquo;just get it things working first\u0026rdquo;).\n Perfection is the enemy of good enough: When you go through your homework assignments and labs your # 1 goal is to \u0026ldquo;just get things working\u0026rdquo; and not to make it perfect the first time. Get things working first (no matter how janky it may seem) and only after you\u0026rsquo;ve got it working should you go through the process developers call refactoring, optimizing the code without changing the behavior (i.e. making it look nice).\n Use names that make sense: As a developer you are going to be frequently tasked with naming things. Naming things is hard, but my advice is to be as explicit as possible. You should always write your code as if someone else is going to read it and you want them to be able to quickly understand what’s going on. One of the best ways to accomplish that is to use names that highly contextual. For example, if you have a variable that is supposed to represent a person’s first name, then be as explicit as possible:\n// very bad - you don't get points for making names super short var n = \u0026quot;Kiara\u0026quot; // ok but not great var name = \u0026quot;Kiara\u0026quot; // best - explicit, there's no doubt what this variable should represent var firstName = \u0026quot;Kiara\u0026quot;   "
},
{
	"uri": "/01-html-basics/tag-overview/tables/",
	"title": "Tables",
	"tags": [],
	"description": "",
	"content": " Tables  Tables represent data in a grid format\n Table Tags\n \u0026lt;table\u0026gt;: element used to create a table\n \u0026lt;tr\u0026gt;: table row\n \u0026lt;td\u0026gt;: table data, represents a cell in the table\n \u0026lt;th\u0026gt;: table headings used to respresent the header for a column or a row\n   Learn more about tables here\n ---- Table examples  JS Bin on jsbin.com\nJS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/block-and-inline-elements/",
	"title": "Block &amp; Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Elements  Block elements always appear on a new line in the browser window\n \u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;ul\u0026gt;, and \u0026lt;li\u0026gt; are examples of block elements\n  JS Bin on jsbin.com\nInline Elements  Inline elements will always appear to continue on the same line as their neighboring elements\n \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;b\u0026gt;, and \u0026lt;em\u0026gt; are examples of inline elements\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/divs-spans/",
	"title": "Divs &amp; Spans",
	"tags": [],
	"description": "",
	"content": " Divs  Divs allow you to group a set of elements together in one block-level box  JS Bin on jsbin.com\n Divs are mainly used to break your content up into logical sections. By doing so, you have more control of the layout and appearance of your pages.  Spans  Spans are the inline equivalent to Divs\n Spans are used to either:\n contain a section of text where there is no other suitable element to differentiate it from its surrounding text\n contain a number of inline elements\n  most common reason why people use  elements is so that they can control the appearance of the content of these elements using CSS\n  JS Bin on jsbin.com\nThis example uses classes and css, we will cover these topics later in the course\n "
},
{
	"uri": "/01-html-basics/tag-overview/other-tags/",
	"title": "Other Tags",
	"tags": [],
	"description": "",
	"content": " Many more tags There are many other tags available to developers such as:\n \u0026lt;b\u0026gt; Makes text bold\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt; Italic text \u0026lt;/i\u0026gt; \u0026lt;br/\u0026gt; Used to break text within a paragraph \u0026lt;hr /\u0026gt; Used to add a horizontal line to visually break up text  JS Bin on jsbin.com\nMDN (Mozilla Developer Network) is an excellent resource for all things HTML, CSS and Javascript. For a complete list of all tags avaiable click here\n "
},
{
	"uri": "/course-materials/",
	"title": "Course Materials",
	"tags": [],
	"description": "",
	"content": " Course Materials "
},
{
	"uri": "/class-resources/",
	"title": "Class Resources",
	"tags": [],
	"description": "",
	"content": " Class Resources "
},
{
	"uri": "/",
	"title": "HTML &amp; CSS Crash Course",
	"tags": [],
	"description": "",
	"content": " Code In One Day: HTML \u0026amp; CSS Crash Course "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]